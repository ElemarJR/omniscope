# Common types and enums
enum WorkerKind {
  ALL
  ACCOUNT_MANAGER
  CONSULTANT
}

enum TimesheetKind {
  ALL
  CONSULTING
  SQUAD
  INTERNAL
  HANDS_ON
}

scalar Date

# Shared interfaces
interface ISummary {
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!
}

# Domain types
type Worker {
  id: Int!
  slug: String!
  name: String!
  email: String
  kind: WorkerKind!
  errors: [String]
  position: String!
  ontologyUserId: Int
  insightsUserId: Int
  todoistUserId: Int
  pipedriveUserId: Int
  isRecognized: Boolean!
  omniUrl: String!
  photoUrl: String

  isOntologyAuthor: Boolean!
  isInsightsAuthor: Boolean!
  isTimeTrackerWorker: Boolean!
  isSpecialProjectsWorker: Boolean!

  timesheet(slug: String!, filters: [FilterInput]): TimesheetSummary
  cases(onlyActives: Boolean): [Case!]!
}

type Client {
  id: Int!
  slug: String!
  name: String!
  isStrategic: Boolean!
  accountManager: Worker
  isRecognized: Boolean!
  omniUrl: String!
  logoUrl: String!
  timesheets: Timesheets
  timesheet(slug: String!, filters: [FilterInput]): TimesheetSummary
}

type Sponsor {
  slug: String!
  name: String!
  photoUrl: String
  clientId: Int
  crmId: String
  jobTitle: String
  linkedinUrl: String
  omniUrl: String

  client: Client
}

type Case {
  id: String!
  slug: String!
  title: String!
  isActive: Boolean!
  preContractedValue: Boolean!
  clientId: String
  everhourProjectsIds: [String!]
  status: String
  lastUpdated: String
  sponsor: String
  offersIds: [Int!]
  errors: [String!]!
  hasDescription: Boolean!
  hasClient: Boolean!
  hasEverhourProjectsIds: Boolean!
  numberOfDaysWithNoUpdates: Int!
  hasUpdatedDescription: Boolean!
  omniUrl: String!
  updates: [CaseUpdate]
  lastUpdate: CaseUpdate
  client: Client
  startOfContract: Date
  endOfContract: Date
  weeklyApprovedHours: Float
  tracker: [TrackerProject]
  timesheets: Timesheets
}

type TrackerProject {
  id: String!
  name: String!
}

type Timesheets {
  lastSixWeeks: TimesheetSummary
}

type CaseUpdate {
  date: String!
  author: String
  status: String
  observations: String
}

type Offer {
  id: Int!
  slug: String!
  name: String!
  coverImageUrl: String
  omniUrl: String!
}

type Project {
  id: String!
  name: String!
  tasks: [Task!]!
  folder: String
  isFavorite: Boolean!
  errors: [String!]!
  numberOfTasks: Int!
  hasTasksWithNoDueDate: Boolean!
  expectedDueDate: String
  hasTasksWithNoAssignee: Boolean!
  hasLateTasks: Boolean!
}

type Task {
  id: Int!
  assigneeId: Int
  projectId: Int!
  content: String!
  description: String!
  isCompleted: Boolean!
  due: String
  isLate: Boolean!
}

# Ontology types
type Ontology {
  totalEntries: Int!
  uniqueClasses: Int!
  uniqueAuthors: Int!
  averageEntriesPerClass: Float!
  stdDevEntriesPerClass: Float!
  averageEntriesPerAuthor: Float!
  stdDevEntriesPerAuthor: Float!

  byClass: [OntologyClassSummary!]!
  byAuthor: [OntologyAuthorSummary!]!

  filterableFields: [OntologyFilterableField!]!
}

type OntologyClassSummary {
  name: String!
  totalEntries: Int!
  uniqueAuthors: Int!
  averageEntriesPerAuthor: Float!
  stdDevEntriesPerAuthor: Float!
  authors: [OntologyNamedSummary!]!
}

type OntologyAuthorSummary {
  name: String!
  totalEntries: Int!
  uniqueClasses: Int!
  averageEntriesPerClass: Float!
  stdDevEntriesPerClass: Float!
  classes: [OntologyNamedSummary!]!
}

type OntologyNamedSummary {
  name: String!
  entries: Int!
}

type OntologyFilterableField {
  field: String!
  selectedValues: [String!]!
  options: [String!]!
}

# Insights types
type Insights {
  totalEntries: Int!
  uniqueAuthors: Int!
  averageEntriesPerAuthor: Float!
  stdDevEntriesPerAuthor: Float!

  byAuthor: [InsightAuthorSummary!]!

  filterableFields: [InsightFilterableField!]!
}

type InsightAuthorSummary {
  name: String!
  entries: Int!
}

type InsightFilterableField {
  field: String!
  selectedValues: [String!]!
  options: [String!]!
}

# User type
type User {
  id: Int!
  name: String!
  email: String!
  slug: String!
  kind: String!
  position: String!
  photoUrl: String!
}


# Active Deals types
type ActiveDeal {
  id: Int!
  title: String!
  stageId: Int!
  stageName: String!
  stageOrderNr: Int!
  clientName: String!
  accountManager: Worker
  addTime: String
  updateTime: String
  daysSinceLastUpdate: Int
}




# Admin

type Inconsistency {
  title: String!
  description: String!
}

# Timesheet types
type Summary implements ISummary {
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!
}

type OneKindSummary {
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!

  #
  byWorker: [NamedSummary]
}

type WeeklyHours {
  week: String!
  hours: Float!
}

type KindSummary {
  internal: OneKindSummary
  consulting: OneKindSummary
  squad: OneKindSummary
  handsOn: OneKindSummary
}

type NamedSummary implements ISummary {
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!

  # Additional fields
  name: String!
  byKind: KindSummary!
  byWeek: [WeekSummary!]!
}

type CaseSummary implements ISummary {
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!

  # Additional fields
  title: String!
  caseDetails: Case
  byKind: KindSummary!
  byWeek: [WeekSummary!]!
  byWorker: [NamedSummary!]!
  workers: [String!]!
  workersByTrackingProject: [TrackingProjectSummary!]! 
}

type TrackingProjectSummary {
  projectId: String!
  workers: [String!]!
}


type DateSummary implements ISummary {
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!

  # Additional fields
  date: String!
  byKind: KindSummary!
  byWeek: [WeekSummary!]!
}

type WeekSummary implements ISummary {
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!

  # Additional fields
  week: String!
  byKind: KindSummary!
}

type FilterableField {
  field: String!
  options: [String]!
  selectedValues: [String]!
}

type TimesheetSummary implements ISummary{
  # Fields from ISummary interface
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  totalHandsOnHours: Float!
  weeklyHours: [WeeklyHours!]!

  # Additional fields
  byKind: KindSummary
  byWorker: [NamedSummary!]!
  byClient: [NamedSummary!]!
  byCase: [CaseSummary!]!
  bySponsor: [NamedSummary!]!
  byAccountManager: [NamedSummary!]!
  byDate: [DateSummary!]!
  byWeek: [WeekSummary!]!
  byOffer: [NamedSummary!]!

  filterableFields: [FilterableField]!
}

# Datasets
type Dataset {
  slug: String
  kind: String
  name: String
}

type DatasetsSet {
  timesheet: TimesheetSummary
}

# Performance Analysis types
type CaseHours {
  caseId: String!
  hours: Float!
  preContracted: Boolean!
}

type WorkingDayHours {
  date: Date!
  hours: Float!
  preContractedWorkHours: Float!
  regularWorkHours: Float!
  byCase: [CaseHours!]!
}

type OneWeekRegularCasePerformanceSummary {
  id: String!
  title: String!
  sponsor: String!
  client: String!
  accountManager: String!
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  wastedHours: Float!
  overApprovedHours: Float!
}

type OneWeekPreContractedCasePerformanceSummary {
  id: String!
  title: String!
  sponsor: String!
  client: String!
  accountManager: String!
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  possibleUnpaidHours: Float!
  possibleIdleHours: Float!
}

type TotalsRegular {
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  wastedHours: Float!
  overApprovedHours: Float!
}

type TotalsPreContracted {
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  possibleUnpaidHours: Float!
  possibleIdleHours: Float!
}

type Totals {
  regular: TotalsRegular!
  preContracted: TotalsPreContracted!
}

type SponsorPerformanceSummary {
  name: String!
  totals: Totals!
  regularCases: [OneWeekRegularCasePerformanceSummary!]!
  preContractedCases: [OneWeekPreContractedCasePerformanceSummary!]!
}

type ClientPerformanceSummary {
  name: String!
  totals: Totals!
  regularCases: [OneWeekRegularCasePerformanceSummary!]!
  preContractedCases: [OneWeekPreContractedCasePerformanceSummary!]!
  sponsors: [SponsorPerformanceSummary!]!
}

type AccountManagerPerformanceSummary {
  name: String!
  totals: Totals!
  regularCases: [OneWeekRegularCasePerformanceSummary!]!
  preContractedCases: [OneWeekPreContractedCasePerformanceSummary!]!
  clients: [ClientPerformanceSummary!]!
}

type WeekPerformanceAnalysis {
  start: Date!
  end: Date!
  regularCases: [OneWeekRegularCasePerformanceSummary!]!
  preContractedCases: [OneWeekPreContractedCasePerformanceSummary!]!
  clients: [ClientPerformanceSummary!]!
  sponsors: [SponsorPerformanceSummary!]!
  accountManagers: [AccountManagerPerformanceSummary!]!
  totals: Totals!
  actualWorkHours: [WorkingDayHours!]!
}

type PerformanceAnalysis {
  start: Date!
  end: Date!
  dateOfInterest: Date!
  weeks: [WeekPerformanceAnalysis!]!
}

# Week Review types
type WeekReview {
  hoursPreviousWeeks: Float!
  hoursPreviousWeeksUntilThisDate: Float!
  hoursThisWeek: Float!

  sunday: TimesheetDateAnalysis
  monday: TimesheetDateAnalysis
  tuesday: TimesheetDateAnalysis
  wednesday: TimesheetDateAnalysis
  thursday: TimesheetDateAnalysis
  friday: TimesheetDateAnalysis
  saturday: TimesheetDateAnalysis

  monthSummary: MonthSummary
  filterableFields: [FilterableField]!

  allocationAnalysisByWorker: [WorkerAllocationAnalysisEntry!]!
  allocationAnalysisByClient: [ClientAllocationAnalysisEntry!]!
}

type MonthSummary {
  hoursThisMonth: Float!
  hoursPreviousMonth: Float!
  hoursPreviousMonthUntilThisDate: Float!
  limitDate: Date!
}

type TimesheetDateAnalysis {
  dailySummary: [DailySummaryEntry!]!
  totalHours: Float!
  bestDay: Date
  bestDayHours: Float!
  worstDay: Date
  worstDayHours: Float!
  averageHours: Float!
}

type DailySummaryEntry {
  date: Date!
  consulting: Float!
  handsOn: Float!
  squad: Float!
  internal: Float!
}

type WorkerAllocationAnalysisEntry {
  status: Int!
  worker: String!
  mean: Float!
  current: Float!
}

type ClientAllocationAnalysisEntry {
  status: Int!
  client: String!
  mean: Float!
  current: Float!
}

# Timeliness Review types
type TimelinessReview {
  totalRows: Int!
  totalTimeInHours: Float!
  
  earlyRows: Int!
  earlyTimeInHours: Float!
  earlyPercentage: Float!
  earlyWorkers: [WorkerSummary!]!
  
  okRows: Int!
  okTimeInHours: Float!
  okPercentage: Float!
  okWorkers: [WorkerSummary!]!
  
  acceptableRows: Int!
  acceptableTimeInHours: Float!
  acceptablePercentage: Float!
  acceptableWorkers: [WorkerSummary!]!
  
  lateRows: Int!
  lateTimeInHours: Float!
  latePercentage: Float!
  lateWorkers: [WorkerSummary!]!

  minDate: Date!
  maxDate: Date!
}

type WorkerSummary {
  worker: String!
  entries: Int!
  timeInHours: Float!
}

# Planned vs Actual types
type ApprovedVsActual {
  start: Date!
  end: Date!
  totalApprovedHours: Float!
  totalActualHours: Float!
  totalDifference: Float!
  numberOfCases: Int!
  cases: [ApprovedVsActualCase!]!
}

type ApprovedVsActualCase {
  id: Int!
  title: String!
  startOfContract: Date
  endOfContract: Date
  weeklyApprovedHours: Float!
  totalApprovedHours: Float!
  totalActualHours: Float!
  totalDifference: Float!
  preContractedValue: Boolean!
  weeks: [ApprovedVsActualWeek!]!
}

type ApprovedVsActualWeek {
  title: String!
  numberOfDays: Int!
  approvedHours: Float!
  actualHours: Float!
  difference: Float!
}

# Query type
type Query {
  inconsistencies: [Inconsistency]!

  accountManagers: [Worker!]!
  consultantsAndEngineers: [Worker!]!
  clients(accountManagerName: String, accountManagerSlug: String): [Client!]!
  sponsors: [Sponsor!]!
  cases(onlyActives: Boolean): [Case!]!
  offers: [Offer!]!

  accountManager(id: Int, slug: String): Worker @atLeastOne
  consultantOrEngineer(id: Int, slug: String): Worker @atLeastOne
  client(id: Int, slug: String): Client @atLeastOne
  sponsor(slug: String!): Sponsor
  case(id: String, slug: String): Case @atLeastOne
  offer(id: Int, slug: String): Offer @atLeastOne
  user(email: String, slug: String): User @atLeastOne

  datasets(kind: String): [Dataset!]!

  timesheet(slug: String!, kind: TimesheetKind = ALL, filters: [FilterInput]): TimesheetSummary
  ontology(slug: String!, filters: [FilterInput]): Ontology
  insights(slug: String!, filters: [FilterInput]): Insights
  thisWeek(kind: TimesheetKind = ALL): DatasetsSet
  weekReview(date_of_interest: Date!, filters: [FilterInput]): WeekReview!
  timelinessReview(date_of_interest: Date!, filters: [FilterInput]): TimelinessReview!
  projects: [Project!]!
  approvedVsActual(start: Date!, end: Date!): ApprovedVsActual!
  performanceAnalysis(date_of_interest: Date!): PerformanceAnalysis!
  
  activeDeals(accountManagerSlug: String, accountManagerName: String): [ActiveDeal!]!
  activeDeal(id: Int): ActiveDeal
}

# Mutation type
type Mutation {
  refreshData: Boolean!
}

# Directives
directive @atLeastOne on FIELD_DEFINITION

# Input types
input FilterInput {
  field: String!
  selectedValues: [String!]!
}
