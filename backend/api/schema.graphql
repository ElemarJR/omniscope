enum WorkerKind {
  ALL
  ACCOUNT_MANAGER
  CONSULTANT
}

# Domain 

type Worker {
  id: Int!
  slug: String!
  name: String!
  kind: WorkerKind!
  errors: [String]
  position: String!
  ontologyUserId: Int
  insightsUserId: Int
  todoistUserId: Int
  pipedriveUserId: Int
  isRecognized: Boolean!
  omniUrl: String!
  photoUrl: String!
  isOntologyAuthor: Boolean
}

type Client {
  id: Int!
  slug: String!
  name: String!
  isStrategic: Boolean!
  accountManager: Worker
  isRecognized: Boolean!
  omniUrl: String!
  logoUrl: String!
}

type Sponsor {
  slug: String!
  name: String!
  photoUrl: String
  clientId: Int
  crmId: String
  jobTitle: String
  linkedinUrl: String
  omniUrl: String!
}

type Case {
  id: String!
  slug: String!
  title: String!
  isActive: Boolean!
  clientId: String
  everhourProjectsIds: [String!]
  status: String
  lastUpdated: String
  sponsor: String
  offersIds: [Int!]
  errors: [String!]!
  hasDescription: Boolean!
  hasClient: Boolean!
  hasEverhourProjectsIds: Boolean!
  numberOfDaysWithNoUpdates: Int!
  hasUpdatedDescription: Boolean!
  omniUrl: String!

  client: Client
}

type Offer {
  id: Int!
  slug: String!
  name: String!
  coverImageUrl: String
  omniUrl: String!
}

# Timesheets

interface ISummary {
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
}

type Summary implements ISummary {
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
}

type KindSummary {
  internal: Summary
  consulting: Summary
  squad: Summary
}

type NamedSummary implements ISummary {
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  
  name: String!
  byKind: KindSummary!
}


type DateSummary implements ISummary {
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!

  date: String!
  byKind: KindSummary!
}

type WeekSummary implements ISummary {
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!
  week: String!
  totalSquadHours: Float!
  totalConsultingHours: Float!
  totalInternalHours: Float!
  byKind: KindSummary!
}

type TimesheetSummary implements ISummary{
  totalEntries: Int!
  totalHours: Float!
  uniqueClients: Int!
  uniqueWorkers: Int!
  uniqueCases: Int!
  uniqueWorkingDays: Int!
  uniqueSponsors: Int!
  uniqueAccountManagers: Int!
  uniqueWeeks: Int!
  averageHoursPerEntry: Float!
  stdDevHoursPerEntry: Float!
  averageHoursPerDay: Float!
  stdDevHoursPerDay: Float!
  averageHoursPerWorker: Float!
  stdDevHoursPerWorker: Float!
  averageHoursPerClient: Float!
  stdDevHoursPerClient: Float!
  averageHoursPerCase: Float!
  stdDevHoursPerCase: Float!
  averageHoursPerSponsor: Float!
  stdDevHoursPerSponsor: Float!
  averageHoursPerAccountManager: Float!
  stdDevHoursPerAccountManager: Float!
  averageHoursPerWeek: Float!
  stdDevHoursPerWeek: Float!

  byKind: KindSummary
  byWorker: [NamedSummary!]!
  byClient: [NamedSummary!]!
  byCase: [NamedSummary!]!
  bySponsor: [NamedSummary!]!
  byAccountManager: [NamedSummary!]!
  byDate: [DateSummary!]!
  byWeek: [WeekSummary!]!
}

# Query

type Query {
  accountManagers: [Worker!]!
  consultantsAndEngineers: [Worker!]!
  clients: [Client!]!
  sponsors: [Sponsor!]!
  cases(onlyActives: Boolean): [Case!]!
  offers: [Offer!]!

  accountManager(id: Int, slug: String): Worker @atLeastOne
  consultantOrEngineer(id: Int, slug: String): Worker @atLeastOne
  client(id: Int, slug: String): Client @atLeastOne
  sponsor(slug: String!): Sponsor
  case(id: String, slug: String): Case @atLeastOne
  offer(id: Int, slug: String): Offer @atLeastOne

  timesheet(slug: String!, kind: TimesheetKind = ALL): TimesheetSummary
}

enum TimesheetKind {
  ALL
  CONSULTING
  SQUAD
  INTERNAL
}

directive @atLeastOne on FIELD_DEFINITION
