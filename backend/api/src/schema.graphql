# Import all schema files
#import "./schema/common.graphql"
#import "./domain/schema.graphql"
#import "./datasets/schema.graphql"
#import "./analytics/schema.graphql"
#import "./operational-summaries/schema.graphql"

type Inconsistency {
  title: String!
  description: String!
}

type BusinessCalendar {
  workingDays: [Date!]!
  holidays: [BusinessCalendarHoliday!]!
}

type BusinessCalendarHoliday {
  date: Date!
  reason: String!
}

type Query {
  inconsistencies: [Inconsistency]!

  accountManagers: [AccountManager!]!
  consultantsAndEngineers: [Worker!]!
  clients(accountManagerName: String, accountManagerSlug: String): [Client!]!
  sponsors: [Sponsor!]!
  cases(onlyActives: Boolean): [Case!]!
  offers: [Offer!]!

  accountManager(id: Int, slug: String): AccountManager @atLeastOne
  consultantOrEngineer(id: Int, slug: String): Worker @atLeastOne
  client(id: Int, slug: String): Client @atLeastOne
  sponsor(slug: String!): Sponsor
  case(id: String, slug: String): Case @atLeastOne
  offer(id: Int, slug: String): Offer @atLeastOne
  user(email: String, slug: String): User @atLeastOne

  datasets(kind: String): [Dataset!]!

  timesheet(slug: String!, kind: TimesheetKind = ALL, filters: [FilterInput]): TimesheetSummary
  ontology(slug: String!, filters: [FilterInput]): Ontology
  insights(slug: String!, filters: [FilterInput]): Insights
  thisWeek(kind: TimesheetKind = ALL): DatasetsSet

  weekReview(date_of_interest: Date!, filters: [FilterInput]): WeekReview!
  timelinessReview(date_of_interest: Date!, filters: [FilterInput]): TimelinessReview!
  projects: [Project!]!
  approvedVsActual(start: Date!, end: Date!): ApprovedVsActual!
  performanceAnalysis(dateOfInterest: Date!): PerformanceAnalysis!
  revenueTracking(dateOfInterest: Date, accountManagerNameOrSlug: String, filters: [FilterInput]): RevenueTracking!

  activeDeals(accountManagerSlug: String, accountManagerName: String): [ActiveDeal!]!
  activeDeal(id: Int): ActiveDeal

  forecast(dateOfInterest: Date, filters: [FilterInput]): Forecast!

  staleliness: Staleliness!

  businessCalendar(start: Date!, end: Date!): BusinessCalendar!
  cache: [CacheItem!]!
  timesheetCache(after: Date, before: Date): [TimesheetCacheItem!]!

  yearlyForecast(year: Int): YearlyForecast!

  inConsulting(dateOfInterest: Date): InConsulting!
}

type CacheItem {
  key: String!
  createdAt: Date!
}

type TimesheetCacheItem {
  after: Date!
  before: Date!
  createdAt: Date!
}

type Mutation {
  refreshData: Boolean!
  invalidateCache(key: String!): Boolean!
  invalidateTimesheetCache(after: Date, before: Date): Boolean!
}
