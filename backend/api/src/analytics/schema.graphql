# Performance Analysis types
type CaseHours {
  caseId: String!
  hours: Float!
  preContracted: Boolean!
}

type WorkingDayHours {
  date: Date!
  hours: Float!
  preContractedWorkHours: Float!
  regularWorkHours: Float!
  byCase: [CaseHours!]!
}

type RegularCasePerformanceSummary {
  id: String!
  title: String!
  sponsor: String!
  client: String!
  accountManager: String!
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  wastedHours: Float!
  overApprovedHours: Float!
}

type PreContractedCasePerformanceSummary {
  id: String!
  title: String!
  sponsor: String!
  client: String!
  accountManager: String!
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  possibleUnpaidHours: Float!
  possibleIdleHours: Float!
}

type TotalsRegular {
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  wastedHours: Float!
  overApprovedHours: Float!
}

type TotalsPreContracted {
  approvedWorkHours: Float!
  actualWorkHours: Float!
  inContextActualWorkHours: Float!
  possibleUnpaidHours: Float!
  possibleIdleHours: Float!
}

type Totals {
  regular: TotalsRegular
  preContracted: TotalsPreContracted
}

type SponsorPerformanceSummary {
  name: String!
  totals: Totals!
  regularCases: [RegularCasePerformanceSummary!]!
  preContractedCases: [PreContractedCasePerformanceSummary!]!
}

type ClientPerformanceSummary {
  name: String!
  totals: Totals!
  regularCases: [RegularCasePerformanceSummary!]!
  preContractedCases: [PreContractedCasePerformanceSummary!]!
  sponsors: [SponsorPerformanceSummary!]!
}

type AccountManagerPerformanceSummary {
  name: String!
  totals: Totals!
  regularCases: [RegularCasePerformanceSummary!]!
  preContractedCases: [PreContractedCasePerformanceSummary!]!
  clients: [ClientPerformanceSummary!]!
}

type WeekPerformanceAnalysis {
  start: Date!
  end: Date!
  periodType: String!
  regularCases: [RegularCasePerformanceSummary!]!
  preContractedCases: [PreContractedCasePerformanceSummary!]!
  clients: [ClientPerformanceSummary!]!
  sponsors: [SponsorPerformanceSummary!]!
  accountManagers: [AccountManagerPerformanceSummary!]!
  totals: Totals!
  actualWorkHours: [WorkingDayHours!]!
}

type PastPerformanceAnalysis {
  regularCases: [RegularCasePerformanceSummary!]!
  preContractedCases: [PreContractedCasePerformanceSummary!]!
  clients: [ClientPerformanceSummary!]!
  sponsors: [SponsorPerformanceSummary!]!
  accountManagers: [AccountManagerPerformanceSummary!]!
  totals: Totals!
}

type PerformanceAnalysisPivoted {
  regular: PerformanceAnalysisPivotedRegular!
  preContracted: PerformanceAnalysisPivotedPreContracted!
}

type PerformanceAnalysisPivotedRegular {
  byAccountManager: [PerformanceAnalysisPivotedRegularByAccountManager!]!
}

type PerformanceAnalysisPivotedPreContracted {
  byAccountManager: [PerformanceAnalysisPivotedPreContractedByAccountManager!]!
}

type PerformanceAnalysisPivotedRegularByAccountManager {
  name: String!
  weeks: [PerformanceAnalysisPivotedRegularWeek!]!
  past: TotalsRegular
  byClient: [PerformanceAnalysisPivotedRegularByClient!]!
}

type PerformanceAnalysisPivotedPreContractedByAccountManager {
  name: String!
  weeks: [PerformanceAnalysisPivotedPreContractedWeek!]!
  past: TotalsPreContracted
  byClient: [PerformanceAnalysisPivotedPreContractedByClient!]!
}

type PerformanceAnalysisPivotedRegularByClient {
  name: String!
  weeks: [PerformanceAnalysisPivotedRegularWeek!]!
  past: TotalsRegular
  bySponsor: [PerformanceAnalysisPivotedRegularBySponsor!]!
}

type PerformanceAnalysisPivotedPreContractedByClient {
  name: String!
  weeks: [PerformanceAnalysisPivotedPreContractedWeek!]!
  past: TotalsPreContracted
  bySponsor: [PerformanceAnalysisPivotedPreContractedBySponsor!]!
}

type PerformanceAnalysisPivotedRegularBySponsor {
  name: String!
  weeks: [PerformanceAnalysisPivotedRegularWeek!]!
  past: TotalsRegular
  byCase: [PerformanceAnalysisPivotedRegularByCase!]!
} 

type PerformanceAnalysisPivotedPreContractedBySponsor {
  name: String!
  weeks: [PerformanceAnalysisPivotedPreContractedWeek!]!
  past: TotalsPreContracted
  byCase: [PerformanceAnalysisPivotedPreContractedByCase!]!
} 

type PerformanceAnalysisPivotedRegularByCase {
  title: String!
  weeks: [PerformanceAnalysisPivotedRegularWeek!]!
  past: TotalsRegular
}

type PerformanceAnalysisPivotedPreContractedByCase {
  title: String!
  weeks: [PerformanceAnalysisPivotedPreContractedWeek!]!
  past: TotalsPreContracted
} 

type PerformanceAnalysisPivotedRegularWeek {
  start: Date!
  end: Date!
  periodType: String!
  totals: TotalsRegular!
}

type PerformanceAnalysisPivotedPreContractedWeek {
  start: Date!
  end: Date!
  periodType: String!
  totals: TotalsPreContracted!
}

type PerformanceAnalysis {
  start: Date!
  end: Date!
  dateOfInterest: Date!
  weeks: [WeekPerformanceAnalysis!]!
  past: PastPerformanceAnalysis!
  pivoted: PerformanceAnalysisPivoted!
}

# Week Review types
type WeekReview {
  hoursPreviousWeeks: Float!
  hoursPreviousWeeksUntilThisDate: Float!
  hoursThisWeek: Float!

  sunday: TimesheetDateAnalysis
  monday: TimesheetDateAnalysis
  tuesday: TimesheetDateAnalysis
  wednesday: TimesheetDateAnalysis
  thursday: TimesheetDateAnalysis
  friday: TimesheetDateAnalysis
  saturday: TimesheetDateAnalysis

  monthSummary: MonthSummary
  filterableFields: [FilterableField]!

  allocationAnalysisByWorker: [WorkerAllocationAnalysisEntry!]!
  allocationAnalysisByClient: [ClientAllocationAnalysisEntry!]!
}

type MonthSummary {
  hoursThisMonth: Float!
  hoursPreviousMonth: Float!
  hoursPreviousMonthUntilThisDate: Float!
  limitDate: Date!
}

type TimesheetDateAnalysis {
  dailySummary: [DailySummaryEntry!]!
  totalHours: Float!
  bestDay: Date
  bestDayHours: Float!
  worstDay: Date
  worstDayHours: Float!
  averageHours: Float!
}

type DailySummaryEntry {
  date: Date!
  consulting: Float!
  handsOn: Float!
  squad: Float!
  internal: Float!
}

type WorkerAllocationAnalysisEntry {
  status: Int!
  worker: String!
  mean: Float!
  current: Float!
}

type ClientAllocationAnalysisEntry {
  status: Int!
  client: String!
  mean: Float!
  current: Float!
}

# Timeliness Review types
type TimelinessReview {
  totalRows: Int!
  totalTimeInHours: Float!
  
  earlyRows: Int!
  earlyTimeInHours: Float!
  earlyPercentage: Float!
  earlyWorkers: [WorkerSummary!]!
  
  okRows: Int!
  okTimeInHours: Float!
  okPercentage: Float!
  okWorkers: [WorkerSummary!]!
  
  acceptableRows: Int!
  acceptableTimeInHours: Float!
  acceptablePercentage: Float!
  acceptableWorkers: [WorkerSummary!]!
  
  lateRows: Int!
  lateTimeInHours: Float!
  latePercentage: Float!
  lateWorkers: [WorkerSummary!]!

  minDate: Date!
  maxDate: Date!

  filterableFields: [FilterableField]!
}

type WorkerSummary {
  worker: String!
  workerSlug: String!
  entries: Int!
  timeInHours: Float!
}

# Planned vs Actual types
type ApprovedVsActual {
  start: Date!
  end: Date!
  totalApprovedHours: Float!
  totalActualHours: Float!
  totalDifference: Float!
  numberOfCases: Int!
  cases: [ApprovedVsActualCase!]!
}

type ApprovedVsActualCase {
  id: Int!
  title: String!
  startOfContract: Date
  endOfContract: Date
  weeklyApprovedHours: Float!
  totalApprovedHours: Float!
  totalActualHours: Float!
  totalDifference: Float!
  preContractedValue: Boolean!
  weeks: [ApprovedVsActualWeek!]!
}

type ApprovedVsActualWeek {
  title: String!
  numberOfDays: Int!
  approvedHours: Float!
  actualHours: Float!
  difference: Float!
}

# Revenue Tracking types
type RevenueTracking {
  year: Int!
  month: Int!
  day: Int!
  preContracted: RevenueTrackingPreContracted!
  regular: RevenueTrackingRegular!
  summaries: RevenueTrackingSummaries!
  total: Float!
  proRataInfo: RevenueTrackingProRataInfo!
  filterableFields: [FilterableField]!
}

type RevenueTrackingProRataInfo {
  byKind: [RevenueTrackingProRataByKind!]!
}

type RevenueTrackingProRataByKind {
  kind: String!
  penalty: Float!
  byAccountManager: [RevenueTrackingProRataByAccountManager!]!
}

type RevenueTrackingProRataByAccountManager {
  name: String!
  penalty: Float!
  byClient: [RevenueTrackingProRataByClient!]!
}

type RevenueTrackingProRataByClient {
  name: String!
  penalty: Float!
  bySponsor: [RevenueTrackingProRataBySponsor!]!
}

type RevenueTrackingProRataBySponsor {
  name: String!
  penalty: Float!
  byCase: [RevenueTrackingProRataByCase!]!
}

type RevenueTrackingProRataByCase {
  title: String!
  penalty: Float!
  byProject: [RevenueTrackingProRataByProject!]!
}

type RevenueTrackingProRataByProject {
  name: String!
  penalty: Float!
  partialFee: Float!
  byWorker: [RevenueTrackingProRataByWorker!]!
} 

type RevenueTrackingProRataByWorker {
  name: String!
  penalty: Float!
  hours: Float!
  partialFee: Float!
}

type RevenueTrackingPreContracted {
  monthly: RevenueTrackingMonthly!
}

type RevenueTrackingRegular {
  monthly: RevenueTrackingMonthly!
}

type RevenueTrackingSummaries {
  byAccountManager: [RevenueTrackingByAccountManager!]!
  byClient: [RevenueTrackingByClient!]!
  bySponsor: [RevenueTrackingBySponsor!]!
  byKind: [RevenueTrackingByKind!]!
  byConsultant: [RevenueTrackingByConsultant!]!
  byMode: RevenueTrackingByMode!
}

type RevenueTrackingSummary {
  name: String!
  slug: String
  preContracted: Float!
  regular: Float!
  total: Float!
  totalConsultingFee: Float!
  totalConsultingFeeNew: Float!
  totalConsultingHours: Float!
  totalConsultingPreHours: Float!
  totalConsultingPreFee: Float!
  totalHandsOnFee: Float!
  totalSquadFee: Float!
}

type RevenueTrackingByConsultant {
  name: String!
  slug: String!
  consultingFee: Float!
  consultingHours: Float!
  consultingPreHours: Float!
}

type RevenueTrackingByKind {
  name: String!
  preContracted: Float!
  regular: Float!
  total: Float!
}

type RevenueTrackingByMode {
  preContracted: Float!
  regular: Float!
  total: Float!
}

type RevenueTrackingMonthly {
  total: Float!
  totalConsultingFee: Float!
  totalConsultingFeeNew: Float!
  totalConsultingHours: Float!
  totalConsultingPreHours: Float!
  totalConsultingPreFee: Float!
  totalHandsOnFee: Float!
  totalSquadFee: Float!
  byAccountManager: [RevenueTrackingByAccountManager!]!
}

type RevenueTrackingByAccountManager {
  name: String!
  slug: String
  fee: Float!
  consultingFee: Float!
  consultingFeeNew: Float!
  consultingHours: Float!
  consultingPreFee: Float!
  consultingPreHours: Float!
  handsOnFee: Float!
  squadFee: Float!
  regular: Float!
  preContracted: Float!
  total: Float!
  partial: Boolean
  byClient: [RevenueTrackingByClient!]!
}

type RevenueTrackingByClient {
  name: String!
  slug: String
  fee: Float!
  consultingFee: Float!
  consultingFeeNew: Float!
  consultingPreFee: Float!
  consultingPreHours: Float!
  consultingHours: Float!
  handsOnFee: Float!
  squadFee: Float!
  regular: Float!
  preContracted: Float!
  total: Float!
  partial: Boolean
  bySponsor: [RevenueTrackingBySponsor!]!
}

type RevenueTrackingBySponsor {
  name: String!
  slug: String
  fee: Float!
  consultingFee: Float!
  consultingFeeNew: Float!
  consultingPreFee: Float!
  consultingPreHours: Float!
  consultingHours: Float!
  handsOnFee: Float!
  squadFee: Float!
  regular: Float!
  preContracted: Float!
  total: Float!
  partial: Boolean
  byCase: [RevenueTrackingByCase!]!
}

type RevenueTrackingByCase {
  title: String!
  slug: String
  fee: Float!
  consultingFee: Float!
  consultingFeeNew: Float!
  consultingPreFee: Float!
  consultingPreHours: Float!
  consultingHours: Float!
  handsOnFee: Float!
  squadFee: Float!
  regular: Float!
  preContracted: Float!
  total: Float!
  partial: Boolean
  byProject: [RevenueTrackingByProject!]!
}

type RevenueTrackingByProject {
  kind: String!
  name: String!
  rate: Float
  hours: Float
  fee: Float!
  consultingHours: Float!
  consultingPreHours: Float!
  consultingFeeNew: Float!
  partial: Boolean
}

# Forecast types
type Forecast {
  dateOfInterest: Date!
  dates: ForecastTimePeriods!
  byKind: ForecastRevenueByType!
  summary: ForecastTotalMetrics!
  filterableFields: [FilterableField]!
  workingDays: ForecastWorkingDayMetrics!
}

type ForecastTimePeriods {
  inAnalysis: Date!
  sameDayOneMonthAgo: Date!
  lastDayOfOneMonthAgo: Date!
  sameDayTwoMonthsAgo: Date!
  lastDayOfTwoMonthsAgo: Date!
  sameDayThreeMonthsAgo: Date!
  lastDayOfThreeMonthsAgo: Date!
  sameDayOneMonthLater: Date!
  lastDayOfOneMonthLater: Date!
  sameDayTwoMonthsLater: Date!
  lastDayOfTwoMonthsLater: Date!
  sameDayThreeMonthsLater: Date!
  lastDayOfThreeMonthsLater: Date!
}

type ForecastTotalMetrics {
  realized: Float!
  inAnalysisConsultingHours: Float!
  inAnalysisConsultingPreHours: Float!
  projected: Float!
  expected: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingPreHours: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  expectedOneMonthLater: Float!
  expectedTwoMonthsLater: Float!
  expectedThreeMonthsLater: Float!
}

type ForecastWorkingDayMetrics {
  inAnalysis: Int!
  inAnalysisPartial: Int!
  oneMonthAgo: Int!
  sameDayOneMonthAgo: Int!
  twoMonthsAgo: Int!
  sameDayTwoMonthsAgo: Int!
  threeMonthsAgo: Int!
  sameDayThreeMonthsAgo: Int!
  oneMonthLater: Int!
  sameDayOneMonthLater: Int!
  twoMonthsLater: Int!
  sameDayTwoMonthsLater: Int!
  threeMonthsLater: Int!
  sameDayThreeMonthsLater: Int!
}

type ForecastRevenueByType {
  consulting: ForecastConsultingRevenue!
  consultingPre: ForecastClientRevenue!
  handsOn: ForecastClientRevenue!
  squad: ForecastClientRevenue!
}

type ForecastClientRevenue {
  byClient: [ForecastClientMetrics!]!
  bySponsor: [ForecastSponsorMetrics!]!
  byCase: [ForecastCaseMetrics!]!
  byProject: [ForecastProjectMetrics!]!
  totals: ForecastRevenueMetrics!
}

type ForecastConsultingRevenue {
  byClient: [ForecastConsultingClientMetrics!]!
  bySponsor: [ForecastConsultingSponsorMetrics!]!
  byCase: [ForecastConsultingCaseMetrics!]!
  byProject: [ForecastConsultingProjectMetrics!]!
  byConsultant: [ForecastConsultantMetrics!]!
  totals: ForecastConsultingTotalMetrics!
}

type ForecastConsultantMetrics {
  name: String!
  slug: String!
  inAnalysis: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  oneMonthAgoConsultingFeeNew: Float!
  sameDayOneMonthAgo: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  sameDayOneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  sameDayTwoMonthsAgo: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  sameDayTwoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  sameDayThreeMonthsAgo: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  sameDayThreeMonthsAgoConsultingFeeNew: Float!
  projected: Float!
  expected: Float!
  expectedHistorical: Float!
}

type ForecastRevenueMetrics {
  inAnalysis: Float!
  oneMonthAgo: Float!
  twoMonthsAgo: Float!
  threeMonthsAgo: Float!
  inAnalysisConsultingFeeNew: Float!
  oneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  inAnalysisConsultingPreHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  threeMonthsAgoConsultingPreHours: Float!
}

type ForecastConsultingTotalMetrics {
  inAnalysis: Float!
  inAnalysisConsultingHours: Float!
  inAnalysisConsultingPreHours: Float!
  inAnalysisConsultingFeeNew: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  oneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingPreHours: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  sameDayOneMonthAgo: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  sameDayOneMonthAgoConsultingFeeNew: Float!
  sameDayTwoMonthsAgo: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  sameDayTwoMonthsAgoConsultingFeeNew: Float!
  sameDayThreeMonthsAgo: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  sameDayThreeMonthsAgoConsultingFeeNew: Float!
  projected: Float!
  expected: Float!
  expectedOneMonthLater: Float!
  expectedTwoMonthsLater: Float!
  expectedThreeMonthsLater: Float!
  expectedHistorical: Float!
}

type ForecastSponsorMetrics {
  name: String!
  slug: String!
  clientSlug: String
  inAnalysis: Float!
  oneMonthAgo: Float!
  twoMonthsAgo: Float!
  threeMonthsAgo: Float!
}

type ForecastCaseMetrics {
  title: String!
  slug: String!
  sponsorSlug: String
  clientSlug: String
  inAnalysis: Float!
  oneMonthAgo: Float!
  twoMonthsAgo: Float!
  threeMonthsAgo: Float!
}

type ForecastProjectMetrics {
  name: String!
  slug: String!
  caseSlug: String!
  inAnalysis: Float!
  oneMonthAgo: Float!
  twoMonthsAgo: Float!
  threeMonthsAgo: Float!
}

type ForecastClientMetrics {
  name: String!
  slug: String
  inAnalysis: Float!
  oneMonthAgo: Float!
  twoMonthsAgo: Float!
  threeMonthsAgo: Float!
} 

type ForecastConsultingClientMetrics {
  name: String!
  slug: String
  
  inAnalysis: Float!
  inAnalysisConsultingHours: Float!
  inAnalysisConsultingPreHours: Float!
  inAnalysisConsultingFeeNew: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  oneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingPreHours: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  sameDayOneMonthAgo: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  sameDayOneMonthAgoConsultingFeeNew: Float!
  sameDayTwoMonthsAgo: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  sameDayTwoMonthsAgoConsultingFeeNew: Float!
  sameDayThreeMonthsAgo: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  sameDayThreeMonthsAgoConsultingFeeNew: Float!
  projected: Float!
  expected: Float!
  expectedOneMonthLater: Float!
  expectedTwoMonthsLater: Float!
  expectedThreeMonthsLater: Float!
  expectedHistorical: Float!
} 

type ForecastConsultingSponsorMetrics {
  name: String!
  slug: String!
  clientSlug: String
  inAnalysis: Float!
  inAnalysisConsultingHours: Float!
  inAnalysisConsultingPreHours: Float!
  inAnalysisConsultingFeeNew: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  oneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingPreHours: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  sameDayOneMonthAgo: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  sameDayOneMonthAgoConsultingFeeNew: Float!
  sameDayTwoMonthsAgo: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  sameDayTwoMonthsAgoConsultingFeeNew: Float!
  sameDayThreeMonthsAgo: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  sameDayThreeMonthsAgoConsultingFeeNew: Float!
  projected: Float!
  expected: Float!
  expectedOneMonthLater: Float!
  expectedTwoMonthsLater: Float!
  expectedThreeMonthsLater: Float!
  expectedHistorical: Float!
}

type ForecastConsultingCaseMetrics {
  title: String!
  slug: String!
  sponsorSlug: String
  clientSlug: String
  inAnalysis: Float!
  inAnalysisConsultingHours: Float!
  inAnalysisConsultingPreHours: Float!
  inAnalysisConsultingFeeNew: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  oneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  sameDayOneMonthAgo: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  sameDayOneMonthAgoConsultingFeeNew: Float!
  sameDayTwoMonthsAgo: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  sameDayTwoMonthsAgoConsultingFeeNew: Float!
  sameDayThreeMonthsAgo: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  projected: Float!
  expected: Float!
  expectedOneMonthLater: Float!
  expectedTwoMonthsLater: Float!
  expectedThreeMonthsLater: Float!
  expectedHistorical: Float!
}

type ForecastConsultingProjectMetrics {
  name: String!
  slug: String!
  caseSlug: String!
  inAnalysis: Float!
  inAnalysisConsultingHours: Float!
  inAnalysisConsultingPreHours: Float!
  inAnalysisConsultingFeeNew: Float!
  oneMonthAgo: Float!
  oneMonthAgoConsultingHours: Float!
  oneMonthAgoConsultingPreHours: Float!
  oneMonthAgoConsultingFeeNew: Float!
  twoMonthsAgo: Float!
  twoMonthsAgoConsultingHours: Float!
  twoMonthsAgoConsultingPreHours: Float!
  twoMonthsAgoConsultingFeeNew: Float!
  threeMonthsAgo: Float!
  threeMonthsAgoConsultingHours: Float!
  threeMonthsAgoConsultingPreHours: Float!
  threeMonthsAgoConsultingFeeNew: Float!
  sameDayOneMonthAgo: Float!
  sameDayOneMonthAgoConsultingHours: Float!
  sameDayOneMonthAgoConsultingFeeNew: Float!
  sameDayTwoMonthsAgo: Float!
  sameDayTwoMonthsAgoConsultingHours: Float!
  ssameDayTwoMonthsAgoConsultingFeeNew: Float!
  sameDayThreeMonthsAgo: Float!
  sameDayThreeMonthsAgoConsultingHours: Float!
  sameDayThreeMonthsAgoConsultingFeeNew: Float!
  projected: Float!
  expected: Float!
  expectedOneMonthLater: Float!
  expectedTwoMonthsLater: Float!
  expectedThreeMonthsLater: Float!
  expectedHistorical: Float!
}
